/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package optim;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import static java.lang.Float.parseFloat;
import static java.lang.Integer.parseInt;
import static java.lang.Math.abs;
import static java.lang.Math.exp;
import static java.lang.Math.log;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Luis Ugueto
 * ugueto.luis19@gmail.com
 */
public class VentanaBR extends javax.swing.JFrame {
    int pos = 0, minimo = 0, maximo = 0;
    private double confianzaDeseada = 0, confianzadatosingresados = 0, confianzare;
    private ArrayList poissoni, poissona;
    private GraficaBR grafica = null;
    
    private ArrayList<GraficaBR> listGrafica = new ArrayList<GraficaBR>();
    
    private int graficaNumber = 0;
    private DefaultTableModel model = new DefaultTableModel(); 
    private JTable table = null; 
    /**
     * Creates new form VentanaAR
     */
    public VentanaBR() {
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(this.getClass().getResource("/imagenes/logo-trans-small.png")));
        this.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
        this.setLocationRelativeTo(null);
        procesar.setBackground(Color.decode("#3e8f3e"));
        procesar.setForeground(Color.white);
        clear.setBackground(Color.decode("#ee4444"));
        clear.setForeground(Color.white);
        jButton2.setBackground(Color.decode("#3e8f3e"));
        jButton2.setForeground(Color.white);
        jButton2.setEnabled(false);
        
        table = new JTable(model);
        table.setBounds(20, 20, 300, 400);

        // COLUMNAS TABLA
        model.addColumn("N° Repuestos"); 
        model.addColumn("Nivel de Confianza");
        
        //Create the scroll pane and add the table to it. 
        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setBounds(40, 180, 400, 180);

        //Add the scroll pane to this window.
        panelResultadosBR1.add(scrollPane, BorderLayout.CENTER);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        panelCriticidad = new javax.swing.JPanel();
        criticidadLabel = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel24 = new javax.swing.JLabel();
        partesIgualesOperandoSimult = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        mttf = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        consecuenciaIndisponibilidad = new javax.swing.JComboBox<String>();
        tiempoEntrega = new javax.swing.JTextField();
        clear = new javax.swing.JButton();
        procesar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel29 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        panelResultadosBR1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        nivelDeseado1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        nivelConfianzaDatos1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        stockMinimo1 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        stockMaximo1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(600, 250));
        setResizable(false);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        criticidadLabel.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        criticidadLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        criticidadLabel.setText("<html>CRITICIDAD");
        criticidadLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout panelCriticidadLayout = new javax.swing.GroupLayout(panelCriticidad);
        panelCriticidad.setLayout(panelCriticidadLayout);
        panelCriticidadLayout.setHorizontalGroup(
            panelCriticidadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCriticidadLayout.createSequentialGroup()
                .addComponent(criticidadLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        panelCriticidadLayout.setVerticalGroup(
            panelCriticidadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(criticidadLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
        );

        jLabel28.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel28.setText("Criticidad del Artículo");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelCriticidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel28)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel28)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelCriticidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel23.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel23.setText("Cálculo del Nivel de Inventarios para Repuestos de Baja Rotación");

        jLabel24.setText("Partes iguales operando simultaneamente:");

        partesIgualesOperandoSimult.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                partesIgualesOperandoSimultKeyTyped(evt);
            }
        });

        jLabel25.setText("Tiempo Medio para Fallar Mean Time to Failure (MTTF):");

        jLabel26.setText("Consecuencia de la Indisponibilidad:");

        mttf.setToolTipText("Horas");
        mttf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mttfActionPerformed(evt);
            }
        });
        mttf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mttfKeyTyped(evt);
            }
        });

        jLabel27.setText("Tiempo de Entrega:");

        consecuenciaIndisponibilidad.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No afecta la producción", "Afecta parcialmente la producción", "Paraliza totalmente la producción" }));

        tiempoEntrega.setToolTipText("Días. Ejemplo: 10");
        tiempoEntrega.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tiempoEntregaActionPerformed(evt);
            }
        });
        tiempoEntrega.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tiempoEntregaKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator4))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                            .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(partesIgualesOperandoSimult, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(consecuenciaIndisponibilidad, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tiempoEntrega, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mttf, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel23)
                .addContainerGap(67, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(partesIgualesOperandoSimult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(mttf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(consecuenciaIndisponibilidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tiempoEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        clear.setText("Borrar Datos");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        procesar.setText("Procesar y Gráficar");
        procesar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                procesarActionPerformed(evt);
            }
        });

        jLabel29.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel29.setText("Resultados");

        panelResultadosBR1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel6.setText("Nivel de Confianza Deseado:");

        nivelDeseado1.setEditable(false);
        nivelDeseado1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nivelDeseado1ActionPerformed(evt);
            }
        });

        jLabel7.setText("Nivel de confianza para los datos ingresados:");

        nivelConfianzaDatos1.setEditable(false);

        jLabel8.setText("Stock mínimo recomendado:");

        stockMinimo1.setEditable(false);

        jLabel9.setText("Stock maximo recomendado:");

        stockMaximo1.setEditable(false);

        jButton2.setText("Ver Gráfica Confiabilidad por cantidad de producto");
        jButton2.setToolTipText("Ver Gráfica (Confiabilidad por cantidad de producto)");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelResultadosBR1Layout = new javax.swing.GroupLayout(panelResultadosBR1);
        panelResultadosBR1.setLayout(panelResultadosBR1Layout);
        panelResultadosBR1Layout.setHorizontalGroup(
            panelResultadosBR1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelResultadosBR1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(panelResultadosBR1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(38, 38, 38)
                .addGroup(panelResultadosBR1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(stockMinimo1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                    .addComponent(nivelConfianzaDatos1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nivelDeseado1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(stockMaximo1))
                .addContainerGap(79, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelResultadosBR1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelResultadosBR1Layout.setVerticalGroup(
            panelResultadosBR1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelResultadosBR1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(panelResultadosBR1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nivelDeseado1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(panelResultadosBR1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(nivelConfianzaDatos1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelResultadosBR1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(stockMinimo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelResultadosBR1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(stockMaximo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 218, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        jScrollPane1.setViewportView(panelResultadosBR1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(procesar)
                        .addGap(18, 18, 18)
                        .addComponent(clear)
                        .addGap(108, 108, 108))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(procesar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(12, 12, 12)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tiempoEntregaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tiempoEntregaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tiempoEntregaActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        // TODO add your handling code here:
        if(this.grafica != null && this.grafica.getVentana().isVisible()) {
            //this.grafica.closeJFrame();
            graficaNumber = 0;
            jButton2.setEnabled(false);
            listGrafica.forEach((a)->a.closeJFrame());
        }
        
        if(this.table != null)
            this.table.setVisible(false);
        
        partesIgualesOperandoSimult.setText("");
        mttf.setText("");
        tiempoEntrega.setText("");
        
        panelCriticidad.setBackground(new Color(240, 240, 240));
        criticidadLabel.setText("CRITICIDAD");
    }//GEN-LAST:event_clearActionPerformed

    private void procesarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_procesarActionPerformed
        // TODO add your handling code here:
        graficarBR();
    }//GEN-LAST:event_procesarActionPerformed

    private void partesIgualesOperandoSimultKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_partesIgualesOperandoSimultKeyTyped
        // TODO add your handling code here:
        char validar = evt.getKeyChar();
        
        if(Character.isLetter(validar)){
            getToolkit().beep();
            evt.consume();
            
            JOptionPane.showMessageDialog(null, "Ingresar solo números!");
        }
    }//GEN-LAST:event_partesIgualesOperandoSimultKeyTyped

    private void mttfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mttfKeyTyped
        // TODO add your handling code here:
        char validar = evt.getKeyChar();
        
        if(Character.isLetter(validar)){
            getToolkit().beep();
            evt.consume();
            
            JOptionPane.showMessageDialog(null, "Ingresar solo números!");
        }
    }//GEN-LAST:event_mttfKeyTyped

    private void tiempoEntregaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tiempoEntregaKeyTyped
        // TODO add your handling code here:
        char validar = evt.getKeyChar();
        
        if(Character.isLetter(validar)){
            getToolkit().beep();
            evt.consume();
            
            JOptionPane.showMessageDialog(null, "Ingresar solo números!");
        }
    }//GEN-LAST:event_tiempoEntregaKeyTyped

    private void mttfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mttfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mttfActionPerformed

    private void nivelDeseado1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nivelDeseado1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nivelDeseado1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:    
        graficaNumber = 1;
        
        if(graficaNumber == 1){
            //jButton2.setEnabled(false);
            this.grafica = new GraficaBR(this.poissoni, this.poissona, 0, this.confianzare);
            listGrafica.add(grafica);
        }
        else
            this.grafica = new GraficaBR(this.poissoni, this.poissona, 0, this.confianzare);
            //jButton2.setEnabled(true);
        
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaBR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaBR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaBR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaBR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaBR().setVisible(true);
            }
        });
    }
    
    public boolean validarBR() {
        
        if (partesIgualesOperandoSimult.getText().isEmpty() || partesIgualesOperandoSimult.getText() == null) {
            JOptionPane.showMessageDialog(null, "No puede dejar los campos vacíos.");
            return false;
        }
        if (mttf.getText().isEmpty() || mttf.getText() == null) {
            JOptionPane.showMessageDialog(null, "No puede dejar los campos vacíos.");
            return false;
        }
        if (tiempoEntrega.getText().isEmpty() || tiempoEntrega.getText() == null) {
            JOptionPane.showMessageDialog(null, "No puede dejar los campos vacíos.");
            return false;
        }
        return true;
    }
    
    public int criticidad (int indisponibilidad, float tiempo) {
        int criticidad=-1;
        if (tiempo == 0 || indisponibilidad == 0) criticidad = 0;
        if (tiempo > 0 && tiempo < 10) {
            switch(indisponibilidad) {
                case 1: case 3: criticidad=1; break;
                case 5: criticidad=3; break; 
            }
        };
        if (tiempo >= 10 && tiempo <= 30) {
            switch(indisponibilidad) {
                case 1: criticidad = 1; break;
                case 3: criticidad = 3; break;
                case 5: criticidad = 5; break;
            }
        };
        if (tiempo > 30) {
            switch(indisponibilidad) {
                case 1: criticidad = 3; break;
                case 3: case 5: criticidad = 5; break;
            }
        };
        return criticidad;
    }
    
    public boolean procesarBR () {
        try{
            if (validarBR()) {
                int partesoperando = parseInt(partesIgualesOperandoSimult.getText());
                int mtbf = parseInt(mttf.getText());
                int tiempoentrega = parseInt(tiempoEntrega.getText());
                int consecuencia = 0;

                if (partesoperando < 0 || mtbf < 0 || tiempoentrega < 0) {
                    JOptionPane.showMessageDialog(null, "Todos los campos deben ser positivos");
                }
                if(consecuenciaIndisponibilidad.getSelectedItem().toString().equalsIgnoreCase("No afecta la producción"))
                {
                    consecuencia = 1;
                }
                if(consecuenciaIndisponibilidad.getSelectedItem().toString().equalsIgnoreCase("Afecta parcialmente la producción"))
                {
                    consecuencia = 3;
                }
                if(consecuenciaIndisponibilidad.getSelectedItem().toString().equalsIgnoreCase("Paraliza totalmente la producción"))
                {
                    consecuencia = 5;
                }

                int indisponibilidad = consecuencia;
                int crit = criticidad(indisponibilidad, tiempoentrega);
                int confianzadeseada;

                switch (crit) {
                    case 1: confianzadeseada = 80; break;
                    case 3: confianzadeseada = 90; break;
                    case 5: confianzadeseada = 99; break;
                    default: confianzadeseada = 80; break;
                }

                if (confianzadeseada > 100 || confianzadeseada < 0) {
                    JOptionPane.showMessageDialog(null, "La confianza deseada debe ser un valor entre 0 y 100.");
                    return false;
                }

                double lambda = (double)partesoperando*((double)(tiempoentrega*24)/(double)mtbf);
                ArrayList resultados = PoissonInverso(confianzadeseada, lambda);

                int repuestosnecesarios = (int) resultados.get(0);
                ArrayList array = (ArrayList) resultados.get(1);

                double confianzarep = (double)array.get(array.size()-1)*100; 

                float division = repuestosnecesarios/10;
                int ejex = (int) ((division+1)*10);

                this.confianzaDeseada = confianzadeseada;
                this.minimo = repuestosnecesarios;
                this.confianzadatosingresados = confianzarep;

                uptcrit(crit);

                return true;
            }
        }
        catch (Exception e) { 
            JOptionPane.showMessageDialog(null, e.getClass().getName() + ": " + e.getMessage());   
        }
        return false;
    }

    
    public void uptcrit (int criticidad) {
        String texto=""; int valor=0;

        if (criticidad == 5) {
            texto = "Alta";
            panelCriticidad.setBackground(Color.RED);
        }
        else if (criticidad == 3) {
            texto = "Media";
            panelCriticidad.setBackground(Color.ORANGE);
        }
        else if (criticidad == 1) {
            texto = "Baja";
            panelCriticidad.setBackground(Color.GREEN);
        }

        criticidadLabel.setText(texto);
        
    }
    
    public void graficarBR () {
        try{
            if(procesarBR()){
                if(graficaNumber == 1){
                    //this.grafica.closeJFrame();
                    listGrafica.forEach((a)->a.closeJFrame());
                }
                int partesoperando = parseInt(partesIgualesOperandoSimult.getText());
                int mtbf = parseInt(mttf.getText());
                int tiempoentrega = parseInt(tiempoEntrega.getText());
                double confianzadeseada = this.confianzaDeseada;
                double confiabilidad = confianzadeseada;

                double lambda = (double)partesoperando*((double)tiempoentrega*24/(double)mtbf);

                int j=0; boolean control = false; ArrayList res = new ArrayList(); boolean marca[] = null;

                while(!control){
                    res.add(j, poisson(j, lambda));
                    if (confianzadeseada/100 <= (double)res.get(j)) {
                        control = true;
                    } else {
                        j++;
                    }
                }

                int repuestosnecesarios = j;
                double confianzarep = (double)res.get(j)*100; 
                this.confianzare = confianzarep;
                double division = repuestosnecesarios/10;
                int ejex = (int) ((division+1)*10);

                int min = 0, max = 100, recomendado=0;
                ArrayList<Integer> XV = new ArrayList<Integer>();
                ArrayList<Double> poissoni = new ArrayList<Double>();
                ArrayList<Double> poissona = new ArrayList<Double>();

                for (int i = 0; i <= ejex; i++) {

                    XV.add(i);
                    poissoni.add(PoissonTerm(lambda, i)*100);

                    if (i <= repuestosnecesarios) poissona.add((double)res.get(i)*100);
                    else {
                        poissona.add((double)poisson(i, lambda)*100);
                    }


                };

                if (recomendado == 0) {
                    recomendado = ejex;
                };

                int m = 10-(ejex - repuestosnecesarios);
                this.poissoni = poissoni;
                this.poissona = poissona;

                int neces = this.minimo;
                neces++;
                this.maximo = neces;

                nivelDeseado1.setText(""+this.confianzaDeseada);
                nivelConfianzaDatos1.setText(""+Math.round(this.confianzadatosingresados * 100d) / 100d); 
                stockMinimo1.setText(""+this.minimo);
                stockMaximo1.setText(""+this.maximo);

                if(this.table != null)
                {
                    for( int i = model.getRowCount() - 1; i >= 0; i-- )
                    {
                        model.removeRow(i);
                    }
                }
                
                int numRows = 0;
                for (int i = ejex; i >= repuestosnecesarios-m; i--) {
                    model.addRow(new Object[]{i, Math.round((double)poissona.get(i) * 100d) / 100d });
                    numRows++;
                    if (i == repuestosnecesarios) {
                        table.setRowSelectionInterval(numRows-1, numRows-1);
                   }
                }
               
                table.setVisible(true);
                jButton2.setEnabled(true);
                //ResultadosBR resultadosFrame = new ResultadosBR(this.confianzaDeseada, this.confianzadatosingresados, this.minimo, this.maximo, poissona, repuestosnecesarios, m, ejex, poissoni, confianzarep);

                //GraficaBR grafica = new GraficaBR(poissoni, poissona, 0,confianzarep);
            }
        }
        catch (Exception e) { 
            JOptionPane.showMessageDialog(null, e.getClass().getName() + ": " + e.getMessage());   
        }
    }

    public ArrayList PoissonInverso (double confiabilidad, double lambda) {
        int i=0; boolean control = false; ArrayList res = new ArrayList();
        
        while(!control){
            res.add("");
            res.set(i, poisson(i, lambda)); 
            
            if ((double)confiabilidad/100 <= (double)res.get(i)) { // i, lambda, true?
                control = true;
            } else {
                i++;
            }
        }
        ArrayList arr = new ArrayList();
        arr.add(i);
        arr.add(res);
        return arr;
    }

    public double LogGamma(double Z) {
		double S=1+76.18009173/Z-86.50532033/(Z+1)+24.01409822/(Z+2)-1.231739516/(Z+3)+.00120858003/(Z+4)-.00000536382/(Z+5);
		double LG= (Z-.5)*Math.log(Z+4.5)-(Z+4.5)+Math.log(S*2.50662827465);
        return LG;
    }

    public double Gcf(double X,double A) {        // Good for X>A+1
	
		double A0=0;
		double B0=1;
		double A1=1;
		double B1=X;
		double AOLD=0;
		double N=0;
		while (Math.abs((A1-AOLD)/A1)>.00001) {
			AOLD=A1;
			N=N+1;
			A0=A1+(N-A)*A0;
			B0=B1+(N-A)*B0;
			A1=X*A0+N*A1;
			B1=X*B0+N*B1;
			A0=A0/B1;
			B0=B0/B1;
			A1=A1/B1;
			B1=1;
		}
		double Prob=Math.exp(A*Math.log(X)-X-LogGamma(A))*A1;
        
        return 1-Prob;
    }

    public double Gser(double X,double A) {        // Good for X<A+1.
		double T9=1/A;
		double G=T9;
		double I=1;
		while (T9>G*.00001) {
			T9=T9*X/(A+I);
			G=G+T9;
			I=I+1;
		}
		G=G*Math.exp(A*Math.log(X)-X-LogGamma(A));
        
        return G;
    }

    public double Gammacdf(double x, double a) {
        double GI;
        if (x<=0) {
            GI=0;
        } else if (x<a+1) {
            GI=Gser(x,a);
        } else {
            GI=Gcf(x,a);
        }
        
        return GI;
    }

    public double poisson(double Z, double Lam) {
        double Poiscdf = 0, auxPoiscdf = 0, auxZ = 0;
        if (Lam<=0) {
            positivo();
        } else if (Z<0) {
            Poiscdf=0;
        } else {
            auxZ = Math.floor(Z);
            Z = auxZ;
            Poiscdf=1-Gammacdf(Lam,Z+1);  
        }
        
        double mult = Poiscdf*100000;
        auxPoiscdf = mult/100000;
        
        Poiscdf=auxPoiscdf;
        
        return Poiscdf;
    }
    
    public double Fact(double x ) {
        // x factorial
        int  t=1;
        while (x > 1)
           t *= x--;
        return t;
   }

    public double LnFact(double x ) {
    // ln(x!) by Stirling's formula
    //   see Knuth I: 111
        if (x <= 1)  x = 1;

        if (x < 12)
            return Math.log( Fact(Math.round(x)) );
        else {
           double invx = 1 / x;
           double invx2 = invx * invx;
           double invx3 = invx2 * invx;
           double invx5 = invx3 * invx2;
           double invx7 = invx5 * invx2;

           double sum = ((x + 0.5) * Math.log(x)) - x;
           sum += Math.log(2*Math.PI) / 2;
           sum += (invx / 12) - (invx3 / 360);
           sum += (invx5 / 1260) - (invx7 / 1680);

           return sum;
        }
    }

    public double PoissonTerm(double u, double k) {
        // by logs
        return  Math.exp( (k * Math.log(u)) - u - LnFact(k) );
   }

    public boolean positivo () {

        if (pos == 0) {
            JOptionPane.showMessageDialog(null, "Lambda debe ser positivo.");
            pos = 1;
            return true;
        }
        return false;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clear;
    private javax.swing.JComboBox<String> consecuenciaIndisponibilidad;
    private javax.swing.JLabel criticidadLabel;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTextField mttf;
    private javax.swing.JTextField nivelConfianzaDatos1;
    private javax.swing.JTextField nivelDeseado1;
    private javax.swing.JPanel panelCriticidad;
    private javax.swing.JPanel panelResultadosBR1;
    private javax.swing.JTextField partesIgualesOperandoSimult;
    private javax.swing.JButton procesar;
    private javax.swing.JTextField stockMaximo1;
    private javax.swing.JTextField stockMinimo1;
    private javax.swing.JTextField tiempoEntrega;
    // End of variables declaration//GEN-END:variables
}
